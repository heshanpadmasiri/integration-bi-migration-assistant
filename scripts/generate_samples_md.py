import os

# Get the root directory of the project
root_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))

# Define the relative paths from the root directory
relative_samples_dir = 'mule/src/test/resources/blocks/mule3'
relative_output_md_path = 'samples/MULE_COMPONENT_SAMPLES.md'
relative_readme_md_path = 'README.md'
relative_dw_md_path = 'samples/MULE_DATAWEAVE_SAMPLES.md'
relative_dataweave_dir = os.path.join(relative_samples_dir, 'transform-message')

# Construct the absolute paths
samples_dir = os.path.join(root_dir, relative_samples_dir)
output_md_path = os.path.join(root_dir, relative_output_md_path)
readme_md_path = os.path.join(root_dir, relative_readme_md_path)
dw_md_path = os.path.join(root_dir, relative_dw_md_path)
dataweave_dir = os.path.join(root_dir, relative_dataweave_dir)
dataweave_files_dir = os.path.join(dataweave_dir, 'dataweave-files')
dataweave_bal_files_dir = os.path.join(dataweave_dir, 'dataweave-bal-files')

# List all files in the directory and its subdirectories
all_files = []
for root, dirs, files in os.walk(samples_dir):
    for file in files:
        all_files.append(os.path.join(root, file))

# Sort all files to ensure consistent order
all_files.sort()

# Filter XML and BAL files
xml_files = [f for f in all_files if f.endswith('.xml')]
bal_files = [f for f in all_files if f.endswith('.bal')]

# Group files by their immediate parent directory
grouped_files = {}
for file in xml_files + bal_files:
    parent_dir = os.path.basename(os.path.dirname(file))
    if parent_dir == 'unsupported-block' or parent_dir == 'dataweave-bal-files':
        continue
    if parent_dir not in grouped_files:
        grouped_files[parent_dir] = {'xml': [], 'bal': []}
    if file.endswith('.xml'):
        grouped_files[parent_dir]['xml'].append(file)
    elif file.endswith('.bal'):
        grouped_files[parent_dir]['bal'].append(file)

# Sort files within each group to ensure consistent order
for files in grouped_files.values():
    files['xml'].sort()
    files['bal'].sort()

# Pair XML and BAL files based on their names within each group
paired_files = {}
for parent_dir, files in grouped_files.items():
    paired_files[parent_dir] = []
    for xml_file in files['xml']:
        base_name = os.path.splitext(os.path.basename(xml_file))[0]
        for bal_file in files['bal']:
            if base_name in os.path.basename(bal_file):
                paired_files[parent_dir].append((xml_file, bal_file))
                break

# Function to read file content
def read_file_content(file_path):
    with open(file_path, 'r') as file:
        return file.read()

# Sort the paired_files dictionary by parent_dir keys in alphabetical order
sorted_paired_files = dict(sorted(paired_files.items()))

# Generate Markdown content for samples
markdown_content = '# Sample Input and Output\n\n'
markdown_content += 'The `mule-to-ballerina-migration-assistant` project includes sample input and output files to demonstrate the conversion process. These samples are located in the `src/test/resources/blocks/mule3` directory.\n\n'

for parent_dir, pairs in sorted_paired_files.items():

    markdown_content += f'## {parent_dir.replace("-", " ").title()}\n\n'
    if parent_dir == 'transform-message':
        markdown_content += f'See [DataWeave Samples](Dataweave_samples.md) for more details on Dataweave conversions.\n\n'
    for xml_file, bal_file in pairs:
        # TODO: Filter out display samples by a tag or something
        input_content = read_file_content(xml_file)
        output_content = read_file_content(bal_file)
        example_title = os.path.splitext(os.path.basename(xml_file))[0].replace("_", " ").title()

        markdown_content += f'- ### {example_title}\n\n'
        markdown_content += f'**Input ({os.path.basename(xml_file)}):**\n```xml\n{input_content}\n```\n'
        markdown_content += f'**Output ({os.path.basename(bal_file)}):**\n```ballerina\n{output_content}\n```\n\n'

# Write the Markdown content to the output file
with open(output_md_path, 'w') as file:
    file.write('###### This markdown file is AUTO-GENERATED by the test suite. Do not modify manually. ######\n\n')
    file.write(markdown_content)

print(f'>> Mule component samples have been extracted and written to {output_md_path}')

# List directories to identify supported Mule components
supported_components = sorted([d for d in os.listdir(samples_dir) if os.path.isdir(os.path.join(samples_dir, d)) and d != 'unsupported-block'])

# Generate DataWeave samples

# List DWL and BAL files
dwl_files = sorted([f for f in os.listdir(dataweave_files_dir) if f.endswith('.dwl')])
bal_files = sorted([f for f in os.listdir(dataweave_bal_files_dir) if f.endswith('.bal')])

# Function to generate heading from filename
def generate_heading(file_name):
    title = file_name.replace('transform_message_with_', '').replace('_', ' ').title()
    return title + ' Expression'

# Pair DWL and BAL files based on their names
paired_files = {}
for dwl_file in dwl_files:
    base_name = os.path.splitext(dwl_file)[0]
    matching_bal_file = next((bal for bal in bal_files if base_name in bal), None)
    if matching_bal_file:
        paired_files[base_name] = (dwl_file, matching_bal_file)

# Generate Markdown content for DataWeave Samples
dataweave_markdown_content = '# DataWeave to Ballerina Transformations\n\n'
dataweave_markdown_content += 'This section provides examples of DataWeave scripts and their corresponding Ballerina implementations.\n\n'

for base_name, (dwl_file, bal_file) in paired_files.items():
    heading = generate_heading(base_name)
    dwl_content = read_file_content(os.path.join(dataweave_files_dir, dwl_file))
    bal_content = read_file_content(os.path.join(dataweave_bal_files_dir, bal_file))

    dataweave_markdown_content += f'## {heading}\n\n'
    dataweave_markdown_content += f'**DataWeave Script ({dwl_file}):**\n```dataweave\n{dwl_content}\n```\n\n'
    dataweave_markdown_content += f'**Ballerina Output ({bal_file}):**\n```ballerina\n{bal_content}\n```\n\n'

# Write the DataWeave Markdown content
dataweave_md_path = os.path.join(root_dir, dw_md_path)
with open(dataweave_md_path, 'w') as file:
    file.write('###### This markdown file is AUTO-GENERATED by the test suite. Do not modify manually. ######\n\n')
    file.write(dataweave_markdown_content)

print(f'>> Mule DataWeave samples have been extracted and written to {dataweave_md_path}')

# Read README.md content
with open(readme_md_path, 'r') as file:
    readme_content = file.readlines()

# Find the start and end index of the Supported Mule Components section
start_index = readme_content.index('## Supported Mule Components\n') + 1
end_index = start_index
while end_index < len(readme_content) and not readme_content[end_index].startswith('## '):
    end_index += 1

# Replace the old list with the new list
mule_components_section = '(This section is AUTO-GENERATED by the test suite)\n\n'
mule_components_section += 'The migration tool currently supports the following Mule components:\n\n'
for component in supported_components:
    component_title = component.replace("-", " ").title()
    component_link = component.lower().replace(" ", "-")
    mule_components_section += f'- [{component_title}](samples/MULE_COMPONENT_SAMPLES.md#{component_link})\n'

mule_components_section += '\n'

# Find the start and end index of the Supported DataWeave Transformations section
dw_start_index = readme_content.index('## Supported DataWeave Transformations\n') + 1
dw_end_index = dw_start_index
while dw_end_index < len(readme_content) and not readme_content[dw_end_index].startswith('## '):
    dw_end_index += 1

# Update README.md to include links to DataWeave headings
dataweave_section = '(This section is AUTO-GENERATED by the test suite)\n\n'
dataweave_section += 'The migration tool currently supports the following DataWeave transformations and their corresponding Ballerina implementations:\n\n'
for base_name in paired_files.keys():
    heading = generate_heading(base_name)
    dataweave_section += f'- [{heading}](samples/MULE_DATAWEAVE_SAMPLES.md#{heading.lower().replace(" ", "-")})\n'

dataweave_section += '\n'

# Replace the old mule component and dataweave sections with the new ones
readme_content = readme_content[:start_index] + [mule_components_section] + readme_content[end_index:dw_start_index] + [dataweave_section] + readme_content[dw_end_index:]

# Write the updated README.md content
with open(readme_md_path, 'w') as file:
    file.writelines(readme_content)

print(f'>> \'Supported Mule Components\' section has been updated in {readme_md_path}')
print(f'>> \'Supported DataWeave Transformations\' section has been updated in {readme_md_path}')
